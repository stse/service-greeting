image: openjdk:15

stages:
  - build
  - test
  - scan
  - publish

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'

build:
  stage: build
  script: ./gradlew assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - .gradle

test:
  stage: test
  script: ./gradlew check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .gradle
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml

publish:
  stage: publish
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - ./gradlew assemble
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/distributions/greeting.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/greeting/1.0.0/greeting.zip"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/distributions/greeting.tar "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/greeting/1.0.0/greeting.tar"'
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
  
sonarqube:
  stage: scan
  script: ./gradlew sonarqube
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .sonar/cache
